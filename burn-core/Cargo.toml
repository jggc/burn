[package]
authors = ["nathanielsimard <nathaniel.simard.42@gmail.com>"]
categories = ["science", "no-std", "embedded", "wasm"]
description = "Flexible and Comprehensive Deep Learning Framework in Rust"
edition.workspace = true
keywords = ["deep-learning", "machine-learning", "tensor", "pytorch", "ndarray"]
license.workspace = true
name = "burn-core"
readme.workspace = true
repository = "https://github.com/tracel-ai/burn/tree/main/burn-core"
version.workspace = true

[features]
default = [
    "std",
    "burn-dataset?/default",
    "burn-ndarray?/default",
    "burn-candle?/default",
    "burn-wgpu?/default",
    "burn-fusion?/default",
    "burn-tch?/default",
    "burn-dataset?/default",
    "burn-common/default",
    "burn-tensor/default",
]
std = [
    "flate2",
    "log",
    "rand/std",
    "rmp-serde",
    "serde/std",
    "serde_json/std",
    "bincode/std",
    "half/std",
    "burn-ndarray?/std",
    "burn-candle?/std",
    "burn-wgpu?/std",
    "burn-fusion?/std",
    "burn-common/std",
    "burn-tensor/std",
]
dataset = ["burn-dataset"]
sqlite = ["burn-dataset?/sqlite"]
sqlite-bundled = ["burn-dataset?/sqlite-bundled"]

wasm-sync = ["burn-tensor/wasm-sync", "burn-common/wasm-sync"]

# Backend
autodiff = ["burn-autodiff"]
fusion = ["burn-fusion", "burn-wgpu?/fusion"]

## Backend features
cuda = ["burn-candle?/cuda"]
metal = ["burn-candle?/metal"]
accelerate = ["burn-candle?/accelerate", "burn-ndarray?/blas-accelerate"]
openblas = ["burn-ndarray?/blas-openblas"]
openblas-system = ["burn-ndarray?/blas-openblas-system"]
blas-netlib = ["burn-ndarray?/blas-netlib"]

ndarray = ["burn-ndarray"]
tch = ["burn-tch"]
candle = ["burn-candle"]
wgpu = ["burn-wgpu"]

# Serialization formats
experimental-named-tensor = ["burn-tensor/experimental-named-tensor"]

test-tch = ["tch"]   # To use tch during testing, default uses ndarray.
test-wgpu = ["wgpu"] # To use wgpu during testing, default uses ndarray.


[dependencies]


# ** Please make sure all dependencies support no_std when std is disabled **

burn-common = { path = "../burn-common", version = "0.12.0", default-features = false }
burn-dataset = { path = "../burn-dataset", version = "0.12.0", optional = true, default-features = false }
burn-derive = { path = "../burn-derive", version = "0.12.0" }
burn-tensor = { path = "../burn-tensor", version = "0.12.0", default-features = false }

# Backends
burn-ndarray = { path = "../burn-ndarray", version = "0.12.0", optional = true, default-features = false }
burn-wgpu = { path = "../burn-wgpu", version = "0.12.0", optional = true }
burn-autodiff = { path = "../burn-autodiff", version = "0.12.0", optional = true }
burn-fusion = { path = "../burn-fusion", version = "0.12.0", optional = true }
burn-tch = { path = "../burn-tch", version = "0.12.0", optional = true }
burn-candle = { path = "../burn-candle", version = "0.12.0", optional = true }

derive-new = { workspace = true }
libm = { workspace = true }
log = { workspace = true, optional = true }
rand = { workspace = true, features = ["std_rng"] } # Default enables std  
# Using in place of use std::sync::Mutex when std is disabled
spin = { workspace = true, features = ["mutex", "spin_mutex"] }

# The same implementation of HashMap in std but with no_std support (only alloc crate is needed)
hashbrown = { workspace = true, features = ["serde"] } # no_std compatible

# Serialize Deserialize
flate2 = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }

bincode = { workspace = true }
half = { workspace = true }
rmp-serde = { workspace = true, optional = true }
serde_json = { workspace = true, features = ["alloc"] } #Default enables std 

[dev-dependencies]
tempfile = { workspace = true }
burn-dataset = { path = "../burn-dataset", version = "0.12.0", features = [
    "fake",
] }

burn-ndarray = { path = "../burn-ndarray", version = "0.12.0", default-features = false }
burn-autodiff = { path = "../burn-autodiff", version = "0.12.0" }
